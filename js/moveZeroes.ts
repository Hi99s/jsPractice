export {};
// 快慢指针 把这个题看做不等于0的应该去前面
const nums = [0,1,0,3,12];
const moveZeroes = (nums: number[]): number[] => {
    let slow = 0; // 指向非0数的位置
    for(let fast = 0; fast < nums.length; fast++) {
        if( nums[fast] !== 0 ) {
            [nums[slow], nums[fast]] = [nums[fast], nums[slow]]; // 交换位置
            slow++;
        }
    }
    return nums;
}

console.log(moveZeroes(nums));

// 比喻：搬家整理房间
// 想象你刚搬进一个新房子，房间里有一排杂乱摆放的箱子（这就是数组 nums）。箱子上有两种标记：

// 有用的东西（非零元素，比如 1、3、12），你想把它们整齐地靠前放。
// 空的箱子（0），你想把它们堆到房间后面。
// 规则：

// 你不能把箱子搬到别的房间（不能用额外空间，原地操作）。
// 有用箱子的相对顺序不能乱（非零元素的顺序要保持不变）。
// 你希望尽快搞定（尽量减少操作次数）。
// 房间的初始状态可能是这样的：[0, 1, 0, 3, 12]，有点乱，对吧？我们需要把它整理成 [1, 3, 12, 0, 0]。

// 角色：两个小助手
// 为了高效整理，我们请了两个小助手：

// 慢助手（slow）：他负责指着“有用箱子”应该放的位置。他很稳重，每次只在确定位置后往前走一步。
// 快助手（fast）：他跑得快，负责跑遍整个房间，检查每个箱子。他发现有用的箱子就喊一声。
// 这两个助手一起合作，就像双指针，帮我们把房间收拾得井井有条。

// 慢助手（slow）像个“安置点”：他总是指着下一个有用箱子该放的位置，保证了非零元素依次靠前排列，而且顺序不变。
// 快助手（fast）像个“侦察员”：他跑遍房间，发现有用箱子就通知慢助手，遇到空箱子就忽略，把 0 留到最后。
// 交换操作像搬箱子：每次交换都把有用箱子往前挪，空箱子自然被挤到后面